package main

import (
	"log"
	"os"

	_ "github.com/fikrialwan/FitByte/docs" // This will be generated by swag init
	"github.com/fikrialwan/FitByte/config"
	"github.com/fikrialwan/FitByte/internal/controller"
	"github.com/fikrialwan/FitByte/internal/repository"
	"github.com/fikrialwan/FitByte/internal/routes"
	"github.com/fikrialwan/FitByte/internal/service"
	"github.com/gin-gonic/gin"
	"github.com/swaggo/files"
	"github.com/swaggo/gin-swagger"
)

// @title FitByte API
// @version 1.0
// @description A fitness tracking application API
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host localhost:8080
// @BasePath /v1

// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
// @description Type "Bearer" followed by a space and JWT token.

func main() {
	server := gin.Default()

	registerRoutesAndInjectDependency(server)

	run(server)
}

func run(server *gin.Engine) {
	port := os.Getenv("APP_PORT")
	if port == "" {
		port = "8080"
	}

	host := os.Getenv("APP_ENV")
	var serve string
	if host == "develop" {
		serve = "0.0.0.0:" + port
	} else {
		serve = ":" + port
	}

	if err := server.Run(serve); err != nil {
		log.Fatalf("error running server: %v", serve)
	}
}

func registerRoutesAndInjectDependency(server *gin.Engine) {
	db := config.InitDb()

	userRepository := repository.NewUserRepository(db)

	jwtService := service.NewJwtService()
	userService := service.NewUserService(userRepository, jwtService)
	fileService := service.NewFileService()

	userController := controller.NewUserController(userService)
	fileController := controller.NewFileController(fileService)

	// Swagger endpoints with custom configuration
	server.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler, ginSwagger.PersistAuthorization(true)))

	// registerRoutes
	routes.RegisterUserRoutes(server, userController, jwtService)
	routes.RegisterFileRoutes(server, fileController, jwtService)
}
