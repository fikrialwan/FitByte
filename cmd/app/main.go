package main

import (
	"context"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/fikrialwan/FitByte/config"
	_ "github.com/fikrialwan/FitByte/docs" // This will be generated by swag init
	"github.com/fikrialwan/FitByte/internal/controller"
	"github.com/fikrialwan/FitByte/internal/repository"
	"github.com/fikrialwan/FitByte/internal/routes"
	"github.com/fikrialwan/FitByte/internal/service"
	"github.com/fikrialwan/FitByte/middlewares" // Added import for middlewares
	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

// @title FitByte API
// @version 1.0
// @description A fitness tracking application API
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host localhost:8080
// @BasePath /v1

// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
// @description Type "Bearer" followed by a space and JWT token.

func main() {
	server := gin.Default()

	registerRoutesAndInjectDependency(server)

	run(server)
}

func run(server *gin.Engine) {
	port := os.Getenv("APP_PORT")
	if port == "" {
		port = "8080"
	}

	host := os.Getenv("APP_ENV")
	var serve string
	if host == "develop" {
		serve = "0.0.0.0:" + port
	} else {
		serve = ":" + port
	}

	// Create HTTP server with timeouts
	srv := &http.Server{
		Addr:         serve,
		Handler:      server,
		ReadTimeout:  15 * time.Second,
		WriteTimeout: 15 * time.Second,
		IdleTimeout:  60 * time.Second,
	}

	// Start server in a goroutine
	go func() {
		log.Printf("Starting server on %s", serve)
		if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatalf("Failed to start server: %v", err)
		}
	}()

	// Wait for interrupt signal to gracefully shutdown the server
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit
	log.Println("Shutting down server...")

	// Give outstanding requests a deadline for completion
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	// Attempt graceful shutdown
	if err := srv.Shutdown(ctx); err != nil {
		log.Printf("Server forced to shutdown: %v", err)
	} else {
		log.Println("Server exited gracefully")
	}
}

func registerRoutesAndInjectDependency(server *gin.Engine) {
	db := config.InitDb()

	userRepository := repository.NewUserRepository(db)
	activityRepository := repository.NewActivityRepository(db)

	jwtService := service.NewJwtService()
	cacheService := service.NewCacheService()
	userService := service.NewUserService(userRepository, jwtService, cacheService)
	fileService := service.NewFileService()
	activityService := service.NewActivityService(activityRepository)

	userController := controller.NewUserController(userService)
	fileController := controller.NewFileController(fileService)
	activityController := controller.NewActivityController(activityService)
	healthController := controller.NewHealthController(db, cacheService, fileService)

	// Add CORS middleware
	server.Use(middlewares.CORS())

	// Add rate limiting middleware
	server.Use(middlewares.RateLimit(middlewares.GlobalRateLimiter))

	// Swagger endpoints with custom configuration
	server.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler, ginSwagger.PersistAuthorization(true)))

	// Create v1 route group
	v1 := server.Group("/v1")

	// Health check endpoints under v1
	routes.RegisterHealthRoutes(v1, healthController)

	// User routes under v1
	routes.RegisterUserRoutes(v1, userController, jwtService)

	// File routes under v1
	routes.RegisterFileRoutes(v1, fileController, jwtService)

	// Activity routes under v1
	routes.RegisterActivityRoutes(v1, activityController, jwtService)
}
