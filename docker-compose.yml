# https://docs.docker.com/engine/reference/commandline/compose_up
version: "3.9"

services:
  postgresql:
    image: postgres:16
    container_name: fit-byte-postgres
    hostname: database
    restart: no
    volumes:
      - fit_byte_postgres_data:/var/lib/postgresql/data
    ports:
      - ${DB_PORT}:${DB_PORT}
    env_file:
      - .env
    environment:
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_NAME}
    networks:
      - fit-byte-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s
  redis:
    image: redis:7-alpine
    container_name: fit-byte-redis
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    networks:
      - fit-byte-network

  minio:
    image: minio/minio:latest
    container_name: fit-byte-minio
    hostname: minio
    restart: no
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    volumes:
      - fit_byte_minio_data:/data
    networks:
      - fit-byte-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio-init:
    image: minio/mc:latest
    container_name: fit-byte-minio-init
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET: ${MINIO_BUCKET}
    networks:
      - fit-byte-network
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      echo 'Starting MinIO initialization...';
      mc alias set minio http://minio:9000 $${MINIO_ROOT_USER} $${MINIO_ROOT_PASSWORD};
      mc mb minio/$${MINIO_BUCKET} --ignore-existing;
      mc anonymous set public minio/$${MINIO_BUCKET};
      echo 'MinIO bucket $${MINIO_BUCKET} created and configured successfully!';
      "

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fit-byte-app
    restart: always
    ports:
      - ${APP_PORT}:${APP_PORT}
    volumes:
      - .env:/app/.env
    networks:
      - fit-byte-network
    depends_on:
      postgresql:
        condition: service_healthy
      minio-init:
        condition: service_completed_successfully

volumes:
  fit_byte_postgres_data:
  fit_byte_minio_data:

networks:
  fit-byte-network:
    driver: bridge
