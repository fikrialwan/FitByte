services:
  postgresql:
    image: postgres:17.6
    container_name: fitbyte-postgres
    restart: unless-stopped
    volumes:
      - fitbyte_postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    networks:
      - fitbyte-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s

  pgbouncer:
    image: bitnami/pgbouncer:1.24.1
    ports:
      - "6432:6432"
    env_file:
      - .env
    environment:
      PGBOUNCER_PORT: "6432"
      PGBOUNCER_DATABASE: ${DB_NAME}
      PGBOUNCER_POOL_MODE: "transaction"
      PGBOUNCER_MAX_CLIENT_CONN: "1000"
      PGBOUNCER_MAX_DB_CONNECTIONS: "200"
      PGBOUNCER_DEFAULT_POOL_SIZE: "20"
      PGBOUNCER_MIN_POOL_SIZE: "5"
      PGBOUNCER_RESERVE_POOL_SIZE: "20"
      PGBOUNCER_RESERVE_POOL_TIMEOUT: "3.0"
      PGBOUNCER_SERVER_FAST_CLOSE: "1"
      PGBOUNCER_SERVER_ROUND_ROBIN: "1"
      POSTGRESQL_HOST: "postgresql"
      POSTGRESQL_PORT: "5432"
      POSTGRESQL_USERNAME: ${DB_USER}
      POSTGRESQL_PASSWORD: ${DB_PASS}
      POSTGRESQL_DATABASE: ${DB_NAME}
    networks:
      - fitbyte-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "PGPASSWORD=${DB_PASS} psql -h 127.0.0.1 -p 6432 -U ${DB_USER} -d ${DB_NAME} -c 'SELECT 1;' || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      postgresql:
        condition: service_healthy

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - fitbyte-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  minio:
    image: minio/minio:RELEASE.2025-07-23T15-54-02Z
    restart: no
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    command: server /data --console-address ":9001"
    volumes:
      - fitbyte_minio_data:/data
    networks:
      - fitbyte-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio-init:
    image: minio/mc:latest
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
      MINIO_BUCKET: ${MINIO_BUCKET}
    networks:
      - fitbyte-network
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      echo 'Starting MinIO initialization...';
      mc alias set minio http://minio:9000 ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY};
      mc mb minio/${MINIO_BUCKET} --ignore-existing;
      mc anonymous set public minio/${MINIO_BUCKET};
      echo 'MinIO bucket ${MINIO_BUCKET} created and configured successfully!';
      "

  app:
    image: apronny/fitbyte:1.0.0-beta1
    restart: always
    ports:
      - 8080:8080
    volumes:
      - .env:/app/.env
    networks:
      - fitbyte-network
    depends_on:
      pgbouncer:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio-init:
        condition: service_completed_successfully

volumes:
  fitbyte_postgres_data:
  fitbyte_minio_data:

networks:
  fitbyte-network:
    driver: bridge
