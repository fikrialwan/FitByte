// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/activity": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve activities with optional filters (limit, offset, activity type, date range, calories burned range).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "activities"
                ],
                "summary": "Get all activities",
                "parameters": [
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Limit (default: 5)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "description": "Offset (default: 0)",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "Walking",
                            "Running",
                            "Yoga",
                            "Stretching",
                            "Cycling",
                            "Swimming",
                            "Dancing",
                            "Hiking",
                            "HIIT",
                            "JumpRope"
                        ],
                        "type": "string",
                        "description": "Activity Type",
                        "name": "activityType",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Filter from date (ISO8601)",
                        "name": "doneAtFrom",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date-time",
                        "description": "Filter to date (ISO8601)",
                        "name": "doneAtTo",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Minimum calories burned",
                        "name": "caloriesBurnedMin",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Maximum calories burned",
                        "name": "caloriesBurnedMax",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.ActivityResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new activity with automatic calorie calculation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "activities"
                ],
                "summary": "Create activity",
                "parameters": [
                    {
                        "description": "Activity data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ActivityRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Activity created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.CreateActivityResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/file": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Upload an image file (JPEG, JPG, PNG) to S3 storage with max size of 100KB",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "files"
                ],
                "summary": "Upload file to S3",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Image file to upload (max 100KB, JPEG/JPG/PNG only)",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns S3 file URL",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid file or size",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Authenticate user with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginRegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.LoginRegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Register a new user with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "User registration",
                "parameters": [
                    {
                        "description": "Registration credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginRegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.LoginRegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get authenticated user's profile information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user profile",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UserResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.ActivityRequest": {
            "type": "object",
            "required": [
                "activityType",
                "doneAt",
                "durationInMinutes"
            ],
            "properties": {
                "activityType": {
                    "enum": [
                        "Walking",
                        "Yoga",
                        "Stretching",
                        "Cycling",
                        "Swimming",
                        "Dancing",
                        "Hiking",
                        "Running",
                        "HIIT",
                        "JumpRope"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.ActivityType"
                        }
                    ],
                    "example": "Running"
                },
                "doneAt": {
                    "type": "string",
                    "example": "2024-01-15T07:30:00Z"
                },
                "durationInMinutes": {
                    "type": "integer",
                    "maximum": 1440,
                    "minimum": 1,
                    "example": 30
                }
            }
        },
        "dto.ActivityResponse": {
            "type": "object",
            "properties": {
                "activityId": {
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "activityType": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.ActivityType"
                        }
                    ],
                    "example": "Running"
                },
                "caloriesBurned": {
                    "type": "integer",
                    "example": 300
                },
                "createdAt": {
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                },
                "doneAt": {
                    "type": "string",
                    "example": "2024-01-15T07:30:00Z"
                },
                "durationInMinutes": {
                    "type": "integer",
                    "example": 30
                }
            }
        },
        "dto.CreateActivityResponse": {
            "type": "object",
            "properties": {
                "activityId": {
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "activityType": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.ActivityType"
                        }
                    ],
                    "example": "Running"
                },
                "caloriesBurned": {
                    "type": "integer",
                    "example": 300
                },
                "createdAt": {
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                },
                "doneAt": {
                    "type": "string",
                    "example": "2024-01-15T07:30:00Z"
                },
                "durationInMinutes": {
                    "type": "integer",
                    "example": 30
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                }
            }
        },
        "dto.LoginRegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "maxLength": 32,
                    "minLength": 8
                }
            }
        },
        "dto.LoginRegisterResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "dto.UserResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "height": {
                    "type": "integer"
                },
                "heightUnit": {
                    "type": "string"
                },
                "imageUri": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "preference": {
                    "type": "string"
                },
                "weight": {
                    "type": "integer"
                },
                "weightUnit": {
                    "type": "string"
                }
            }
        },
        "entity.ActivityType": {
            "type": "string",
            "enum": [
                "Walking",
                "Yoga",
                "Stretching",
                "Cycling",
                "Swimming",
                "Dancing",
                "Hiking",
                "Running",
                "HIIT",
                "JumpRope"
            ],
            "x-enum-varnames": [
                "Walking",
                "Yoga",
                "Stretching",
                "Cycling",
                "Swimming",
                "Dancing",
                "Hiking",
                "Running",
                "HIIT",
                "JumpRope"
            ]
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/v1",
	Schemes:          []string{},
	Title:            "FitByte API",
	Description:      "A fitness tracking application API",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
