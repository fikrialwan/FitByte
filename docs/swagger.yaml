basePath: /v1
definitions:
  dto.ActivityRequest:
    properties:
      activityType:
        allOf:
        - $ref: '#/definitions/entity.ActivityType'
        enum:
        - Walking
        - Yoga
        - Stretching
        - Cycling
        - Swimming
        - Dancing
        - Hiking
        - Running
        - HIIT
        - JumpRope
        example: Running
      doneAt:
        example: "2024-01-15T07:30:00Z"
        type: string
      durationInMinutes:
        example: 30
        maximum: 1440
        minimum: 1
        type: integer
    required:
    - activityType
    - doneAt
    - durationInMinutes
    type: object
  dto.ActivityResponse:
    properties:
      activityId:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      activityType:
        allOf:
        - $ref: '#/definitions/entity.ActivityType'
        example: Running
      caloriesBurned:
        example: 300
        type: integer
      createdAt:
        example: "2024-01-15T10:30:00Z"
        type: string
      doneAt:
        example: "2024-01-15T07:30:00Z"
        format: date-time
        type: string
      durationInMinutes:
        example: 30
        type: integer
      updatedAt:
        example: "2024-01-15T10:30:00Z"
        type: string
    type: object
  dto.ActivityUpdateRequest:
    properties:
      activityType:
        allOf:
        - $ref: '#/definitions/entity.ActivityType'
        enum:
        - Walking
        - Yoga
        - Stretching
        - Cycling
        - Swimming
        - Dancing
        - Hiking
        - Running
        - HIIT
        - JumpRope
        example: Running
      doneAt:
        example: "2024-01-15T07:30:00Z"
        format: date-time
        type: string
      durationInMinutes:
        example: 30
        maximum: 1440
        minimum: 1
        type: integer
    type: object
  dto.CreateActivityResponse:
    properties:
      activityId:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      activityType:
        allOf:
        - $ref: '#/definitions/entity.ActivityType'
        example: Running
      caloriesBurned:
        example: 300
        type: integer
      createdAt:
        example: "2024-01-15T10:30:00Z"
        type: string
      doneAt:
        example: "2024-01-15T07:30:00Z"
        type: string
      durationInMinutes:
        example: 30
        type: integer
      updatedAt:
        example: "2024-01-15T10:30:00Z"
        type: string
    type: object
  dto.LoginRegisterRequest:
    properties:
      email:
        type: string
      password:
        maxLength: 32
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginRegisterResponse:
    properties:
      email:
        type: string
      token:
        type: string
    type: object
  dto.UserRequest:
    properties:
      height:
        maximum: 250
        minimum: 3
        type: integer
      heightUnit:
        enum:
        - CM
        - INCH
        minLength: 1
        type: string
      imageUri:
        type: string
      name:
        maxLength: 60
        minLength: 2
        type: string
      preference:
        enum:
        - CARDIO
        - WEIGHT
        minLength: 1
        type: string
      weight:
        maximum: 1000
        minimum: 10
        type: integer
      weightUnit:
        enum:
        - KG
        - LBS
        minLength: 1
        type: string
    required:
    - height
    - heightUnit
    - preference
    - weight
    - weightUnit
    type: object
  dto.UserResponse:
    properties:
      email:
        type: string
      height:
        type: integer
      heightUnit:
        type: string
      imageUri:
        type: string
      name:
        type: string
      preference:
        type: string
      weight:
        type: integer
      weightUnit:
        type: string
    type: object
  entity.ActivityType:
    enum:
    - Walking
    - Yoga
    - Stretching
    - Cycling
    - Swimming
    - Dancing
    - Hiking
    - Running
    - HIIT
    - JumpRope
    type: string
    x-enum-varnames:
    - Walking
    - Yoga
    - Stretching
    - Cycling
    - Swimming
    - Dancing
    - Hiking
    - Running
    - HIIT
    - JumpRope
  utils.FailedResponse:
    properties:
      message:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A fitness tracking application API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: FitByte API
  version: "1.0"
paths:
  /activity:
    get:
      consumes:
      - application/json
      description: Retrieve activities with optional filters (limit, offset, activity
        type, date range, calories burned range).
      parameters:
      - description: 'Limit (default: 5)'
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - description: 'Offset (default: 0)'
        in: query
        minimum: 0
        name: offset
        type: integer
      - description: Activity Type
        enum:
        - Walking
        - Running
        - Yoga
        - Stretching
        - Cycling
        - Swimming
        - Dancing
        - Hiking
        - HIIT
        - JumpRope
        in: query
        name: activityType
        type: string
      - description: Filter from date (ISO8601)
        format: date-time
        in: query
        name: doneAtFrom
        type: string
      - description: Filter to date (ISO8601)
        format: date-time
        in: query
        name: doneAtTo
        type: string
      - description: Minimum calories burned
        in: query
        name: caloriesBurnedMin
        type: integer
      - description: Maximum calories burned
        in: query
        name: caloriesBurnedMax
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ActivityResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get all activities
      tags:
      - activities
    post:
      consumes:
      - application/json
      description: Create a new activity with automatic calorie calculation
      parameters:
      - description: Activity data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ActivityRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Activity created successfully
          schema:
            $ref: '#/definitions/dto.CreateActivityResponse'
        "400":
          description: Bad Request - Invalid input format
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create activity
      tags:
      - activities
  /activity/{activityId}:
    delete:
      consumes:
      - application/json
      description: Delete an existing activity by ID
      parameters:
      - description: Activity ID
        in: path
        name: activityId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Activity deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request - Invalid activity ID
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Activity not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete activity
      tags:
      - activities
    patch:
      consumes:
      - application/json
      description: Update an existing activity with automatic calorie recalculation
      parameters:
      - description: Activity ID
        in: path
        name: activityId
        required: true
        type: string
      - description: Activity update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ActivityUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Activity updated successfully
          schema:
            $ref: '#/definitions/dto.ActivityResponse'
        "400":
          description: Bad Request - Invalid input format
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Activity not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update activity
      tags:
      - activities
  /file:
    post:
      consumes:
      - multipart/form-data
      description: Upload an image file (JPEG, JPG, PNG) to S3 storage with max size
        of 100KB
      parameters:
      - description: Image file to upload (max 100KB, JPEG/JPG/PNG only)
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Returns S3 file URL
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request - invalid file or size
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Upload file to S3
      tags:
      - files
  /health:
    get:
      description: Returns the health status of the application
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Health check endpoint
      tags:
      - health
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginRegisterResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: User login
      tags:
      - auth
  /ready:
    get:
      description: Returns the readiness status of the application with actual health
        checks
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "503":
          description: Service Unavailable
          schema:
            additionalProperties: true
            type: object
      summary: Readiness check endpoint
      tags:
      - health
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user with email and password
      parameters:
      - description: Registration credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.LoginRegisterResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: User registration
      tags:
      - auth
  /user:
    get:
      consumes:
      - application/json
      description: Get authenticated user's profile information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: Update user detail profile by id
      parameters:
      - description: profile data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.FailedResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.FailedResponse'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
