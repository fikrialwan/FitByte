basePath: /v1
definitions:
  dto.LoginRegisterRequest:
    properties:
      email:
        type: string
      password:
        maxLength: 32
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginRegisterResponse:
    properties:
      email:
        type: string
      token:
        type: string
    type: object
  dto.UserResponse:
    properties:
      email:
        type: string
      height:
        type: integer
      heightUnit:
        type: string
      imageUri:
        type: string
      name:
        type: string
      preference:
        type: string
      weight:
        type: integer
      weightUnit:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A fitness tracking application API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: FitByte API
  version: "1.0"
paths:
  /file:
    post:
      consumes:
      - multipart/form-data
      description: Upload an image file (JPEG, JPG, PNG) to S3 storage with max size
        of 100KB
      parameters:
      - description: Image file to upload (max 100KB, JPEG/JPG/PNG only)
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Returns S3 file URL
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad request - invalid file or size
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Upload file to S3
      tags:
      - files
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginRegisterResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: User login
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user with email and password
      parameters:
      - description: Registration credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.LoginRegisterResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: User registration
      tags:
      - auth
  /user:
    get:
      consumes:
      - application/json
      description: Get authenticated user's profile information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
